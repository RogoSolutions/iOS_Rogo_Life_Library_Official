// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RogoCore
import CocoaMQTT
import CoreBluetooth
import Foundation
@_exported import RogoCore
import Swift
import UIKit
import _Concurrency
import os.log
import nRFMeshProvision
import os
public class RGBLocation : Swift.Codable, Swift.Hashable {
  final public let label: Swift.String?, desc: Swift.String?, userID: Swift.String?
  final public let extraInfo: RogoCore.RGBLocationExtraInfo?
  final public let createdAt: Swift.String?, updatedAt: Swift.String?, uuid: Swift.String?
  public var groups: [RogoCore.RGBGroup]
  public var allDevicesInLocation: [RogoCore.RGBDevice]
  public var allAutomationsInLocation: [RogoCore.RGBAutomation]
  public var allScenarioInLocation: [RogoCore.RGBScenario]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RogoCore.RGBLocation, rhs: RogoCore.RGBLocation) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
public struct RGBLocationExtraInfo : Swift.Codable {
  public let bleMesh: RogoCore.RGBbleMeshInfo?
  public let groupElementIds: RogoCore.RGBGroupElementIDS?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBbleMeshInfo : Swift.Codable {
  public let uuid: Swift.String?
  public let networkKeys: [Swift.String]?, appKeys: [Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBGroupElementIDS : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBUser : Swift.Codable {
  public var userId: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var photoURL: Swift.String?
  public var token: Swift.String?
  public var extraInfo: RogoCore.RGBUserExtraInfo?
  public init(userId: Swift.String?, name: Swift.String?, email: Swift.String?, phone: Swift.String?, photoURL: Swift.String?, token: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RGBProductServices : RogoCore.RGBiProductServices {
  public var allDevices: [RogoCore.RGBDevice] {
    get
  }
  public func getProductsList(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBProduct]?>? = nil)
  public func getAllDevices(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBDevice]?>? = nil)
  public func getDeviceWith(uuid: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBDevice?>? = nil)
  public func addDevices(devices: [RogoCore.RGBDevice], completion: RogoCore.RGBCompletionObject<[RogoCore.RGBDevice]?>? = nil)
  @objc deinit
}
public struct RGBDeviceElementState {
  public var element: Swift.Int?
  public var commandType: RogoCore.RGBCommandType?
  public var commandValue: RogoCore.RGBCmdValue?
}
public protocol RGBiAutomationServices {
  func getListAutomationSupportFor(devices: [RogoCore.RGBDevice]) -> [RogoCore.RGBAutomationType]
  func getListDevicesSupport(animationType: RogoCore.RGBAutomationType, from devices: [RogoCore.RGBDevice]) -> [RogoCore.RGBDevice]
  func getListEventStateSupportOf(device: RogoCore.RGBDevice, automationType: RogoCore.RGBAutomationType) -> [RogoCore.RGBEventStateType]
  func getListAutomationAt(location: RogoCore.RGBLocation, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBAutomation]?>?)
  func addAutomation(automation: RogoCore.RGBAutomation, completion: RogoCore.RGBCompletionObject<RogoCore.RGBAutomation?>?)
  func updateAutomation(automation: RogoCore.RGBAutomation, completion: RogoCore.RGBCompletionObject<RogoCore.RGBAutomation?>?)
  func deleteAutomationWith(automation: RogoCore.RGBAutomation, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
}
public struct RGBUserExtraInfo : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RGBSUserExtraInfo : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Gro : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum RGBRemoteCommand : Swift.Int, Swift.Codable {
  case POWER
  case ALLAPP
  case MUTE
  case PAUSE
  case VOL_UP
  case VOL_DOWN
  case BACK
  case HOME
  case CENTER
  case LEFT
  case UP
  case RIGH
  case DOWN
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RGBValueSimulateRemoteDevice : RogoCore.RGBCmdValue {
  public var remote: RogoCore.RGBRemoteCommand
  public init()
  public init(remote: RogoCore.RGBRemoteCommand)
  @objc deinit
}
public enum RGBEventStateType : Swift.Int, Swift.Codable {
  case OnOff
  case On
  case Off
  case DoorOpenClose
  case DoorOpen
  case DoorClose
  case BatteryLE
  case BatteryGE
  case SinglePress
  case DoublePress
  case LongPress
  case FireAlarm
  case Motion
  case NoMotion
  case LightCondLE
  case LightCondGE
  case TempIN
  case TempLE
  case TempGE
  case HumidIN
  case HumidLE
  case HumidGE
  case NoMotionFromMotion
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct RGBDeviceLogInfo {
  public var cid: Swift.Int?
  public var eventType: RogoCore.RGBCommandType?
  public var currentPart: Swift.Int?
  public var logCid: Swift.Int?
  public var iv: Swift.Int?
  public var lastLogTimeSeconds: Swift.Int?
}
public struct RGBDevice : Swift.Codable, Swift.Hashable {
  public var nwkAddr: Swift.String?
  public var endpoint: Swift.String?
  public var label: Swift.String?, desc: Swift.String?
  public let protocolCTL: Swift.Int?
  public let features: [Swift.Int]?
  public let firmCode: Swift.Int?
  public let firmVer: Swift.String?, partnerID: Swift.String?
  public let elementIDS: [Swift.Int]?, productInfos: [Swift.Int]?
  public var elementInfos: [Swift.String : RogoCore.RGBDeviceElementInfo]?
  public var extraInfo: RogoCore.RGBDeviceExtraInfo?
  public let srcAddr: Swift.Int?
  public let locationID: Swift.String?, mac: Swift.String?, productID: Swift.String?, userID: Swift.String?
  public let createdAt: Swift.String?, updatedAt: Swift.String?, uuid: Swift.String?, groupID: Swift.String?
  public let rootUUID: Swift.String?
  public var productInfo: RogoCore.RGBProduct?
  public var meshStatus: RogoCore.RGBNetworkStatusMessage?
  public let cid: Swift.Int
  public var powerType: RogoCore.RGBPowerType {
    get
  }
  public var productType: RogoCore.RGBProductType? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RogoCore.RGBDevice, rhs: RogoCore.RGBDevice) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBDeviceExtraInfo : Swift.Codable {
  public let hostID: Swift.String?, seriesNo: Swift.String?
  public let bleMesh: RogoCore.BleMesh?
  public let eventSupport: [Swift.Int]?
  public let meshDkey: [Swift.Int8?]?
  public let mDkey: Swift.String?
  public var elementInfos: [Swift.String : RogoCore.RGBDeviceElementInfo]?
  public let zbPaireds: [Swift.String : RogoCore.ZbPairedDevice]?
  public init(hostID: Swift.String?, seriesNo: Swift.String?, bleMesh: RogoCore.BleMesh?, eventSupport: [Swift.Int]?, meshDkey: [Swift.Int8?]?, mDkey: Swift.String?, elementInfos: [Swift.String : RogoCore.RGBDeviceElementInfo]?, zbPaireds: [Swift.String : RogoCore.ZbPairedDevice]?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BleMesh : Swift.Codable {
  public let appKeys: [Swift.String]?, networkKeys: [Swift.String]?
  public let uuid: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBDeviceElementInfo : Swift.Codable {
  public let feature: Swift.Int?
  public let label: Swift.String?
  public let zigbeeData: RogoCore.ZigbeeData?
  public let attrs: [Swift.Int]?
  public init(feature: Swift.Int?, label: Swift.String?, zigbeeData: RogoCore.ZigbeeData?, attrs: [Swift.Int]?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ZbPairedDevice : Swift.Codable {
  public let productID: Swift.String
  public let srcAddr: Swift.Int
  public let zbDatas: [Swift.String : RogoCore.ZigbeeData]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ZigbeeData : Swift.Codable {
  public let data: Swift.Int?, deviceType: Swift.Int?, feature: Swift.Int?, lqi: Swift.Int?
  public let modelID: Swift.String?, name: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum RGBPowerType {
  case battery
  case electric
  case peripheral
  public static func == (a: RogoCore.RGBPowerType, b: RogoCore.RGBPowerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RGBMeshRogo {
  public static let GROUP_ALL: Swift.UInt16
  @objc deinit
}
extension RogoCore.RGBDeviceServices {
  public func generatePlayboxActiveCode(locationId: Swift.String, authApiKey: Swift.String, didGetCodeCompletion: RogoCore.RGBCompletionObject<RogoCore.RGBPlayBoxActiveCode?>?, didAddDeviceCompletion: RogoCore.RGBCompletionObject<Swift.Bool?>?)
  public func removePlayboxActiveCode(code: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Bool?>?)
  public func getHubsStatus(hubs: [RogoCore.RGBDevice], observer: Swift.AnyObject?, timeout: Swift.Int = 5, completion: RogoCore.RGBCompletionObject<RogoCore.RGBNetworkStatusMessage?>?)
}
public enum RGBProtocolType {
  case SMARTHUB
  case BLUETOOTH_MESH
  case ZIGBEE
  case Unknow
  public static func == (a: RogoCore.RGBProtocolType, b: RogoCore.RGBProtocolType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RGBUsbZigbeeStatus : RogoCore.RGBMqttIotMessage {
  public var deviceUUID: Swift.String?
  public var isAvailable: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBValueEventLux : RogoCore.RGBCmdValue {
  public var luxValue: Swift.Int
  public init(valueBytes: [Swift.UInt8])
  @objc deinit
}
public class RGBGroup : Swift.Codable, Swift.Hashable {
  final public let desc: Swift.String?
  final public let type: Swift.Int?
  final public let label: Swift.String?, locationID: Swift.String?, userID: Swift.String?
  final public let elementID: Swift.Int?
  final public let createdAt: Swift.String?, updatedAt: Swift.String?, uuid: Swift.String?
  public var devices: [RogoCore.RGBDevice]
  public init(desc: Swift.String? = nil, type: Swift.Int? = nil, label: Swift.String? = nil, locationID: Swift.String? = nil, userID: Swift.String? = nil, elementID: Swift.Int? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, uuid: Swift.String? = nil, devices: [RogoCore.RGBDevice] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RogoCore.RGBGroup, rhs: RogoCore.RGBGroup) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
public enum RGBAuthMethod {
  case withCredential(credential: Any = "")
  case withEmail(email: Swift.String = "", password: Swift.String = "")
  case withPhone(phone: Swift.String = "")
  case verifySmsMethod(code: Swift.String = "")
}
public enum RGBNetworkEnvironment {
  case development
  case production
  public static func == (a: RogoCore.RGBNetworkEnvironment, b: RogoCore.RGBNetworkEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RGBiDeviceServices {
  func reloadDeviceList(completion: RogoCore.RGBCompletionObject<Swift.Bool?>?)
  func generatePlayboxActiveCode(locationId: Swift.String, authApiKey: Swift.String, didGetCodeCompletion: RogoCore.RGBCompletionObject<RogoCore.RGBPlayBoxActiveCode?>?, didAddDeviceCompletion: RogoCore.RGBCompletionObject<Swift.Bool?>?)
  func removePlayboxActiveCode(code: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Bool?>?)
  func getHubsStatus(hubs: [RogoCore.RGBDevice], observer: Swift.AnyObject?, timeout: Swift.Int, completion: RogoCore.RGBCompletionObject<RogoCore.RGBNetworkStatusMessage?>?)
  func requestBluetoothPermission(statusChangedHandler: ((CoreBluetooth.CBManagerState) -> ())?)
  func getZigbeeDongleStatus(at location: RogoCore.RGBLocation, observer: Swift.AnyObject?, timeout: Swift.Int, completion: RogoCore.RGBCompletionObject<RogoCore.RGBUsbZigbeeStatus?>?)
  func startScanZigbeeDevice(deviceType: RogoCore.RGBProductType, gateWay: RogoCore.RGBDevice, isTurnOnPairingMode: Swift.Bool, timeout: Swift.Int, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBMeshScannedDevice]?>?)
  func stopScanZigbeeDevice(gateWay: RogoCore.RGBDevice)
  func addZigbeeDevice(device: RogoCore.RGBMeshScannedDevice, toHub hub: RogoCore.RGBDevice, didUpdateProgessing: ((_ completedPercent: Swift.Int) -> ())?, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  func scanMeshDevices(deviceType: RogoCore.RGBProductType, timeout: Swift.Int, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBMeshScannedDevice]?>?)
  func scanMeshDevices(timeout: Swift.Int, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBMeshScannedDevice]?>?)
  func scanMeshDevice(timeout: Swift.Int, completion: RogoCore.RGBCompletionObject<RogoCore.RGBMeshScannedDevice?>?)
  func stopScanMeshDevice()
  func locateMeshDevice(device: RogoCore.RGBMeshScannedDevice, hub: RogoCore.RGBDevice, didStartLocating: (() -> ())?, didFinishLocating: (() -> ())?)
  func stopLocateDevice()
  func addMeshDevice(device: RogoCore.RGBMeshScannedDevice, toHub hub: RogoCore.RGBDevice, didUpdateProgessing: ((_ completedPercent: Swift.Int) -> ())?, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  func stopMeshAddProcess()
  func resumeMeshAddProcess()
  func cancelMeshAddProcess()
  func sendControlMessage(_ device: RogoCore.RGBDevice, value: RogoCore.RGBCmdValue, elements: [Swift.Int])
  func sendControlMessage(_ group: RogoCore.RGBGroup, productType: RogoCore.RGBProductCategoryType, value: RogoCore.RGBCmdValue)
  func updateDevice(_ deviceInfo: RogoCore.RGBDevice, completion: RogoCore.RGBCompletionObject<RogoCore.RGBDevice?>?)
  func deleteDevice(_ device: RogoCore.RGBDevice, completion: RogoCore.RGBCompletionObject<RogoCore.RGBDevice?>?)
  func subscribeStateChangeOf(device: RogoCore.RGBDevice, observer: Swift.AnyObject?, statusChangedHandler: RogoCore.RGBCompletionObject<RogoCore.RGBDeviceState?>?)
  func unSubscribeDeviceStateChangeOf(observer: Swift.AnyObject?)
  func requestStateOf(device: RogoCore.RGBDevice, isRequestLog: Swift.Bool)
}
extension RogoCore.RGBiDeviceServices {
  public func reloadDeviceList(completion: RogoCore.RGBCompletionObject<Swift.Bool?>? = nil)
  public func getHubsStatus(hubs: [RogoCore.RGBDevice], observer: Swift.AnyObject?, timeout: Swift.Int = 5, completion: RogoCore.RGBCompletionObject<RogoCore.RGBNetworkStatusMessage?>?)
  public func getZigbeeDongleStatus(at location: RogoCore.RGBLocation, observer: Swift.AnyObject? = nil, timeout: Swift.Int = 5, completion: RogoCore.RGBCompletionObject<RogoCore.RGBUsbZigbeeStatus?>?)
  public func requestStateOf(device: RogoCore.RGBDevice, isRequestLog: Swift.Bool = false)
}
public enum RGBOpenCloseValue : Swift.Int {
  case close
  case open
  case stop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RGBValueOpenClose : RogoCore.RGBCmdValue {
  public var open: Swift.Int
  public init()
  public init(command: RogoCore.RGBOpenCloseValue)
  public init(valueBytes: [Swift.UInt8])
  @objc deinit
}
public enum RGBCommandType : Swift.Int, Swift.Codable {
  case NONE
  case ONOFF
  case OPEN_CLOSE
  case LOCK_UNLOCK
  case BATTERY
  case BRIGHTNESS
  case KELVIN
  case BRIGHTNESS_KELVIN
  case COLOR_HSV
  case COLOR_HSL
  case COLOR_LIST_HSV
  case EVENT_HUMID
  case EVENT_TEMP
  case EVENT_TEMP_HUMID
  case EVENT_DOOR
  case EVENT_MOTION_LUX
  case EVENT_MOTION
  case EVENT_LUX
  case EVENT_SMOKE
  case EVENT_BUTTON_PRESS
  case SMART_TV
  case IR_RE
  case IR_SE
  case SIG_MESH_SEQ
  case SINGLE_PRESS
  case LONG_PRESS
  case DOUBLE_PRESS
  case SENSOR_TEMP_LOG
  case SENSOR_DOOR_LOG
  case SENSOR_MOTION_LIGHT_LOG
  case SENSOR_MOTION_LOG
  case SENSOR_LIGHT_LOG
  case SENSOR_SMOKE_LOG
  case STATE_IOT
  case SWITCHING_ONOFF
  case SYNC_ONOFF_STATE
  case ONOFF_SWITCH_ROGO_V1
  case ONOFF_SWITCH_ROGO_V2
  case BRIGHTNESS_UP
  case BRIGHTNESS_DOWN
  case KELVIN_WARM_UP
  case KELVIN_WARM_DOWN
  case LIST_COLOR
  case NOTIFICATION
  case SIG_MESH_RESET
  case SIMULATOR_REMOTE_SMART_TV
  case CMD_IM_ONLINE
  case CMD_CONTROL_BYTE
  case CMD_CONTROL
  case CMD_ADD_ROGO_GATEWAY
  case CMD_ADD_DEVICE
  case CMD_DELETE_DEVICE
  case CMD_ADD_AUTOMATION
  case CMD_DELETE_AUTOMATION
  case CMD_UPDATE_AUTOMATION
  case CMD_CHANGE_GROUP
  case CMD_ENABLE_ZIGBEE_PAIRING
  case CMD_STOP_ZIGBEE_PAIRING
  case CMD_RESET_ZIGBEE_NETWORK
  case CMD_RESTART_MESH_NETWORK
  case CMD_SIG_UNSUBCRIBE
  case CMD_SIG_SUBCRIBE
  case CMD_GET_DEVICES_STATE
  case CMD_GET_MESH_NETWORK_STATUS
  case CMD_GET_USB_DONGLE_STATUS
  case CMD_GET_ZIGBEE_NETWORK_STATUS
  case CMD_FORCE_RESET_MESH_DEVICE
  case CMD_ZIGBEE_ENABLE_PAIRING_MODE
  case CMD_UPDATE_MESH_DEVICE_KEY
  case NOTIFY_EVENT
  case NOTIFY_SUCCESS_STATUS
  case NOTIFY_PROCESS_STATUS
  case NOTIFY_DEVICE_STATE
  case NOTIFY_MESH_NETWORK_STATUS
  case NOTIFY_USB_DONGLE_STATUS
  case NOTIFY_ZIGBEE_NETWORK_STATUS
  case NOTIFY_ZIGBEE_DQ_DEVICES_PAIRED
  case NOTIFY_DEVICE_STATES
  case NOTIFY_STATES_EVENT
  case NOTIFY_STATE_VALUE
  case CMD_ENABLE_LOG
  case NOTIFY_ELEMENT_STATE_CHANGE
  case EVENT_CLOUD_CHANGE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RGBProductCategoryType : Swift.Int, Swift.CaseIterable {
  case OTHER
  case ALL
  case LIGHT
  case SWITCH
  case PLUG
  case CURTAINS
  case DOORLOCK
  case MEDIA_BOX
  case USB_DONGLE
  case GATEWAY
  case AC
  case TV
  case FAN
  case MOTOR_CONTROLLER
  case BUTTON_DASH
  case SWITCH_SCENE
  case TEMP_SENSOR
  case DOOR_SENSOR
  case SMOKE_SENSOR
  case MOTION_LUX_SENSOR
  case MOTION_SENSOR
  case LUX_SENSOR
  case DUST_SENSOR
  case GATE
  case OTHER_DEVICE_CONTROL
  case SENSOR_DEVICE
  case IR_DEVICE
  public static func getProductTypeOf(device: RogoCore.RGBDevice) -> RogoCore.RGBProductCategoryType
  public static func getProductTypeWith(id: Swift.Int) -> RogoCore.RGBProductCategoryType
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RogoCore.RGBProductCategoryType]
  public typealias RawValue = Swift.Int
  public static var allCases: [RogoCore.RGBProductCategoryType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum RGBProductGroupType : Swift.Int, Swift.CaseIterable {
  case OTHER
  case SMARTHUB
  case SWITCH
  case LIGHT
  case SENSOR
  case OTHER_DEVICE_CONTROL
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RogoCore.RGBProductGroupType]
  public typealias RawValue = Swift.Int
  public static var allCases: [RogoCore.RGBProductGroupType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct RGBLog {
  public var dateTimeSecondOfNextLog: Swift.Int?
  public var logDateTime: Foundation.Date?
  public var logDateTimeInSecond: Swift.Int
  public var logValues: [Swift.Int]
  public var logValue: RogoCore.RGBCmdValue?
  public init(dateTimeSecondOfNextLog: Swift.Int?, logDateTime: Foundation.Date?, logDateTimeInSecond: Swift.Int?, logValues: [Swift.Int], logValue: RogoCore.RGBCmdValue?)
}
public struct RGBScenarioTarget : Swift.Codable, Swift.Hashable {
  public var elements: [Swift.Int]?
  public var id: Swift.String?
  public var pci: Swift.Int?, _protocol: Swift.Int?, srcAddr: Swift.Int?
  public var cinf: Swift.String?
  public init(id: Swift.String, elements: [Swift.Int]? = nil, pci: Swift.Int?, _protocol: Swift.Int? = 0, srcAddr: Swift.Int? = 0, device: RogoCore.RGBDevice)
  public init(id: Swift.String, elements: [Swift.Int]? = nil, pci: Swift.Int?, _protocol: Swift.Int? = 0, srcAddr: Swift.Int? = 0, group: RogoCore.RGBGroup)
  public init(id: Swift.String, elements: [Swift.Int]? = nil, pci: Swift.Int?, _protocol: Swift.Int? = 0, srcAddr: Swift.Int? = 0, location: RogoCore.RGBLocation?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: RogoCore.RGBScenarioTarget, b: RogoCore.RGBScenarioTarget) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RGBValueOnOff : RogoCore.RGBCmdValue {
  public var on: Swift.Int
  public init(on: Swift.Int)
  public init(valueBytes: [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBAutomationServices : RogoCore.RGBiAutomationServices {
  public func getListAutomationSupportFor(devices: [RogoCore.RGBDevice]) -> [RogoCore.RGBAutomationType]
  public func getListDevicesSupport(animationType: RogoCore.RGBAutomationType, from devices: [RogoCore.RGBDevice]) -> [RogoCore.RGBDevice]
  public func getListEventStateSupportOf(device: RogoCore.RGBDevice, automationType: RogoCore.RGBAutomationType) -> [RogoCore.RGBEventStateType]
  public func getListAutomationAt(location: RogoCore.RGBLocation, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBAutomation]?>?)
  public func deleteAutomationWith(automation: RogoCore.RGBAutomation, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  public func addAutomation(automation: RogoCore.RGBAutomation, completion: RogoCore.RGBCompletionObject<RogoCore.RGBAutomation?>?)
  public func updateAutomation(automation: RogoCore.RGBAutomation, completion: RogoCore.RGBCompletionObject<RogoCore.RGBAutomation?>?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGCore {
  public static let shared: RogoCore.RGCore
  public var auth: RogoCore.RGBAuthServices!
  public var user: RogoCore.RGBiUserServices
  public var product: RogoCore.RGBiProductServices
  public var device: RogoCore.RGBiDeviceServices
  public var scenario: RogoCore.RGBiScenarioServices
  public var schedule: RogoCore.RGBiScheduleServices
  public var automation: RogoCore.RGBiAutomationServices
  public var accessToken: Swift.String?
  public func setCustomAuthenticate(authMethod: RogoCore.RGBAuthMethod, customAuth: RogoCore.RGBiAuth)
  public func setTargetEnviroment(environment: RogoCore.RGBNetworkEnvironment)
  public func refreshUserData(completion: @escaping ((_ error: Swift.Error?) -> Swift.Void))
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBMsgBytes {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBCommandControl : RogoCore.RGBMsgBytes {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBScheduleServices : RogoCore.RGBiScheduleServices {
  public func getListSchedulesAt(location: RogoCore.RGBLocation, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBSchedule]?>?)
  public func deleteScheduleWith(uuid: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  public func addSchedule(schedule: RogoCore.RGBSchedule, completion: RogoCore.RGBCompletionObject<RogoCore.RGBSchedule?>?)
  public func updateSchedule(schedule: RogoCore.RGBSchedule, completion: RogoCore.RGBCompletionObject<RogoCore.RGBSchedule?>?)
  @objc deinit
}
public struct RGB {
}
@_hasMissingDesignatedInitializers public class RGBDeviceState : RogoCore.RGBMqttIotMessage {
  public var deviceUUID: Swift.String?
  public var cid: Swift.Int?
  public var stateValues: [RogoCore.RGBDeviceElementState]
  public var deviceLogInfo: RogoCore.RGBDeviceLogInfo?
  public var deviceLogParts: [RogoCore.RGBLogPart]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBMqttIotMessage {
  public var tId: [Swift.UInt8]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBDeviceEventChangeMessage : RogoCore.RGBMqttIotMessage {
  public var deviceUUID: Swift.String?
  public var cid: Swift.Int?
  public var numberEvent: Swift.Int
  public var stateValues: [RogoCore.RGBDeviceElementState]
  @objc deinit
}
public struct RGBProduct : Swift.Codable {
  public let desc: Swift.String?, name: Swift.String?, productID: Swift.String?
  public let categoryID: Swift.Int?, subCategoryID: Swift.Int?, rgbProductProtocol: Swift.Int?, manufacturerID: Swift.Int?
  public let rgbProductExtraInfo: RogoCore.RGBProductExtraInfo?
  public let createdAt: Swift.String?, updatedAt: Swift.String?, uuid: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBProductExtraInfo : Swift.Codable {
  public let year: Swift.String?
  public let features: [Swift.Int]?, eventFeatures: [Swift.Int]?
  public let model: Swift.String?
  public let elementInfos: [Swift.String : RogoCore.RGBDeviceElementInfo]?
  public let orientation: Swift.Int?
  public let switchlayout: [Swift.Int]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RGBObjectDeleteResponse : Swift.Codable {
  public let success: Swift.Bool?
  public let uuid: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RGBUserServices : RogoCore.RGBiUserServices {
  public var locations: [RogoCore.RGBLocation] {
    get
  }
  public var selectedLocation: RogoCore.RGBLocation? {
    get
  }
  public var userInfo: RogoCore.RGBUser? {
    get
  }
  public func getUserExtraInfo(completion: RogoCore.RGBCompletionObject<RogoCore.RGBUserExtraInfo?>? = nil)
  public func getUserLocations(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBLocation]>? = nil)
  public func setSelectedLocation(location: RogoCore.RGBLocation)
  public func createLocation(label: Swift.String, desc: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBLocation?>?)
  public func updateLocations(id: Swift.String, label: Swift.String, desc: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBLocation?>?)
  public func deletedLocations(id: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Bool>?)
  public func getUserGroups(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBGroup]>? = nil)
  public func createGroup(label: Swift.String, desc: Swift.String, locationId: Swift.String, completion: ((RogoCore.RGBGroup?, Swift.Error?) -> ())?)
  public func updateGroup(id: Swift.String, label: Swift.String, desc: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBGroup?>?)
  public func deletedGroup(id: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Bool>?)
  @objc deinit
}
public protocol RGBiSyncServices {
  func getSyncInfo(lastUpdatedAt: Foundation.Date?, completion: ((_ info: [RogoCore.RGBAutomation]?, _ error: Swift.Error?) -> ())?)
}
public struct RGBMeshScannedDevice : Swift.Hashable {
  public var id: Swift.String?
  public var device: nRFMeshProvision.UnprovisionedDevice?
  public var peripheral: CoreBluetooth.CBPeripheral?
  public var rssi: Swift.Int?
  public var product: RogoCore.RGBProduct? {
    get
  }
  public var productType: RogoCore.RGBProductType?
  public var mac: Swift.String?
  public var deviceLabel: Swift.String?
  public var group: RogoCore.RGBGroup?
  public var nwkAddr: Swift.Int?
  public var isAddFailed: Swift.Bool
  public var isAdded: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RogoCore.RGBMeshScannedDevice, rhs: RogoCore.RGBMeshScannedDevice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum RGBErrorCode : Swift.Int {
  case unknow
  case requestTimeOut
  case serverNotResponse
  case meshNodeDisconnected
  case getDeviceFailed
  case addDeviceFailed
  case meshInvalidUnicastAddress
  case tokenExpired
  case bleDeviceUnSupportForAdd
  case bluetoothUnAvailable
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.LocalizedError where Self : Swift.CustomStringConvertible {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum RGBError : Foundation.LocalizedError {
  case undefinedAuthMethod
  case unAuthenticated
  case custom(message: Swift.String, code: RogoCore.RGBErrorCode = .unknow)
}
extension RogoCore.RGBError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var errorCode: RogoCore.RGBErrorCode {
    get
  }
}
public struct RGBAutomation : Swift.Codable {
  public var userID: Swift.String?
  public var locationID: Swift.String?
  public var cmds: [Swift.String : RogoCore.RGBScenarioCmd]?
  public var eventEXT: RogoCore.RGBAutomationEventEXT?
  public var deviceID: Swift.String?
  public var element: Swift.Int?, event: Swift.Int?, val1: Swift.Int?, val2: Swift.Int?
  public var createdAt: Swift.String?, updatedAt: Swift.String?, uuid: Swift.String?
  public init(userID: Swift.String? = nil, locationID: Swift.String? = nil, cmds: [Swift.String : RogoCore.RGBScenarioCmd]? = nil, eventEXT: RogoCore.RGBAutomationEventEXT? = nil, deviceID: Swift.String? = nil, element: Swift.Int? = nil, event: Swift.Int? = nil, val1: Swift.Int? = nil, val2: Swift.Int? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, uuid: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBAutomationEventEXT : Swift.Codable {
  public var mac: Swift.String?, deviceID: Swift.String?
  public var element: Swift.Int?, event: Swift.Int?, val1: Swift.Int?, val2: Swift.Int?
  public var val3: Swift.Int?
  public init(mac: Swift.String? = nil, deviceID: Swift.String? = nil, element: Swift.Int? = nil, event: Swift.Int? = nil, val1: Swift.Int? = nil, val2: Swift.Int? = nil, val3: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBZigbeePairedDevice : Swift.Hashable {
  public var id: Swift.String?
  public var mac: Swift.String?
  public var product: RogoCore.RGBProduct? {
    get
  }
  public var productType: RogoCore.RGBProductType
  public var deviceLabel: Swift.String?
  public var group: RogoCore.RGBGroup?
  public var isAddFailed: Swift.Bool
  public var isAdded: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RogoCore.RGBZigbeePairedDevice, rhs: RogoCore.RGBZigbeePairedDevice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RGBHSVColor : RogoCore.RGBCmdValue {
  public var hsv: [CoreGraphics.CGFloat]
  public init()
  public init(color: UIKit.UIColor)
  public func getIntValue(_ index: Swift.Int) -> Swift.Int
  @objc deinit
}
public enum RGBScenarioCmdType : Swift.Hashable {
  case openClose(isOpen: Swift.Bool)
  case onOff(isOn: Swift.Bool)
  case brightnessKelvin(b: Swift.Int?, k: Swift.Int?)
  case color(h: Swift.Double?, s: Swift.Double?, v: Swift.Double?)
  case switchingOnOff
  case syncOnOfState
  case changeBrightness(isIncrease: Swift.Bool)
  case changeKelvin(isIncrease: Swift.Bool)
  public static func getListCmdTypesSupportFor(eventStateType: RogoCore.RGBEventStateType) -> [RogoCore.RGBScenarioCmdType]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: RogoCore.RGBScenarioCmdType, b: RogoCore.RGBScenarioCmdType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct RGBScenario : Swift.Codable, Swift.Hashable {
  public var label: Swift.String?, locationID: Swift.String?, ownerID: Swift.String?
  public var ownerType: Swift.Int?
  public var cmds: [Swift.String : RogoCore.RGBScenarioCmd]?
  public var userID: Swift.String?, createdAt: Swift.String?, updatedAt: Swift.String?, uuid: Swift.String?
  public var desc: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RogoCore.RGBScenario, rhs: RogoCore.RGBScenario) -> Swift.Bool
  public init(label: Swift.String? = nil, locationID: Swift.String? = nil, ownerID: Swift.String? = nil, ownerType: Swift.Int? = nil, cmds: [Swift.String : RogoCore.RGBScenarioCmd]? = nil, userID: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, uuid: Swift.String? = nil, desc: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBScenarioCmd : Swift.Codable, Swift.Hashable {
  public var delay: Swift.Int?, fTime: Swift.Int?, mTime: Swift.Int?, rTime: Swift.Int?
  public var tTime: Swift.Int?, deviceType: Swift.Int?
  public var id: Swift.String?
  public var targetTo: Swift.Int?
  public var targets: [Swift.String : [RogoCore.RGBScenarioTarget]]?
  public var value: RogoCore.RGBScenarioCmdValue?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RogoCore.RGBScenarioCmd, rhs: RogoCore.RGBScenarioCmd) -> Swift.Bool
  public init(delay: Swift.Int? = 0, fTime: Swift.Int? = nil, mTime: Swift.Int? = nil, rTime: Swift.Int? = nil, tTime: Swift.Int? = nil, deviceType: Swift.Int? = 0, id: Swift.String? = nil, targetTo: Swift.Int? = nil, targets: [Swift.String : [RogoCore.RGBScenarioTarget]]? = nil, value: RogoCore.RGBScenarioCmdValue? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBScenarioCmdValue : Swift.Codable, Swift.Equatable {
  public var valueOnOff: Swift.Int?, valueOpen: Swift.Int?, val: Swift.Int?, type: Swift.Int?
  public var b: Swift.Int?, k: Swift.Int?
  public var hsv: [Swift.Double]?
  public var cmdType: RogoCore.RGBScenarioCmdType? {
    get
    set
  }
  public init(valueOnOff: Swift.Int?, valueOpen: Swift.Int?, val: Swift.Int?, type: Swift.Int?, b: Swift.Int?, k: Swift.Int?, hsv: [Swift.Double]?, cmdType: RogoCore.RGBScenarioCmdType?)
  public static func == (lhs: RogoCore.RGBScenarioCmdValue, rhs: RogoCore.RGBScenarioCmdValue) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RGBDeviceServices : RogoCore.RGBiDeviceServices {
  public func reloadDeviceList(completion: RogoCore.RGBCompletionObject<Swift.Bool?>? = nil)
  public func requestBluetoothPermission(statusChangedHandler: ((CoreBluetooth.CBManagerState) -> ())?)
  public func sendControlMessage(_ device: RogoCore.RGBDevice, value: RogoCore.RGBCmdValue, elements: [Swift.Int])
  public func sendControlMessage(_ group: RogoCore.RGBGroup, productType: RogoCore.RGBProductCategoryType, value: RogoCore.RGBCmdValue)
  public func updateDevice(_ deviceInfo: RogoCore.RGBDevice, completion: RogoCore.RGBCompletionObject<RogoCore.RGBDevice?>?)
  public func deleteDevice(_ device: RogoCore.RGBDevice, completion: RogoCore.RGBCompletionObject<RogoCore.RGBDevice?>?)
  public func subscribeStateChangeOf(device: RogoCore.RGBDevice, observer: Swift.AnyObject?, statusChangedHandler: RogoCore.RGBCompletionObject<RogoCore.RGBDeviceState?>?)
  public func unSubscribeDeviceStateChangeOf(observer: Swift.AnyObject?)
  public func requestStateOf(device: RogoCore.RGBDevice, isRequestLog: Swift.Bool = false)
  @objc deinit
}
public enum RGBAutomationType : Swift.Int, Swift.Codable {
  case StateChange
  case StairSwitch
  case SwitchScene
  case DoorState
  case MotionEvent
  case LuxEvent
  case TempEvent
  case HumidEvent
  case SmokeEvent
  case Notification
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol RGBiUserServices {
  var locations: [RogoCore.RGBLocation] { get }
  var userInfo: RogoCore.RGBUser? { get }
  func getUserExtraInfo(completion: RogoCore.RGBCompletionObject<RogoCore.RGBUserExtraInfo?>?)
  func getUserLocations(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBLocation]>?)
  var selectedLocation: RogoCore.RGBLocation? { get }
  func setSelectedLocation(location: RogoCore.RGBLocation)
  func createLocation(label: Swift.String, desc: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBLocation?>?)
  func updateLocations(id: Swift.String, label: Swift.String, desc: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBLocation?>?)
  func deletedLocations(id: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Bool>?)
  func getUserGroups(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBGroup]>?)
  func createGroup(label: Swift.String, desc: Swift.String, locationId: Swift.String, completion: ((_ info: RogoCore.RGBGroup?, _ error: Swift.Error?) -> ())?)
  func updateGroup(id: Swift.String, label: Swift.String, desc: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBGroup?>?)
  func deletedGroup(id: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Bool>?)
}
public struct RGBPlayBoxActiveCode : Swift.Codable {
  public var code: Swift.String?
  public var expireIn: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum RGBProductType : Swift.CaseIterable {
  case HubPlayBoxTv
  case BM_Switch
  case BM_SwitchScene
  case Zigbee_Switch
  case Zigbee_SwitchScene
  case BM_Light_DownLight
  case BM_Light_Bulb
  case BM_Light_Ceilling
  case BM_Light_Panel
  case BM_Light_SpotLight
  case BM_Light_Chandelier
  case BM_Light_Tripled
  case BM_Plug
  case BM_Motor
  case BM_DoorSensor
  case Motor_Curtain
  case Motor_Gate
  case Zigbee_Motor
  case Zigbee_Plug
  case BM_MotionLightSensor
  case Zigbee_DoorSensor
  case Zigbee_MotionLightSensor
  case Zigbee_SmokeSensor
  public var protocolType: RogoCore.RGBProtocolType? {
    get
  }
  public static func getListProductIdOf(_ product: RogoCore.RGBProductType) -> [Swift.String]
  public var productSubCategoryId: Swift.Int {
    get
  }
  public var productCategoryType: RogoCore.RGBProductCategoryType {
    get
  }
  public var productGroupType: RogoCore.RGBProductGroupType {
    get
  }
  public var productLogCmdType: RogoCore.RGBCommandType? {
    get
  }
  public static func == (a: RogoCore.RGBProductType, b: RogoCore.RGBProductType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [RogoCore.RGBProductType]
  public static var allCases: [RogoCore.RGBProductType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RGBiAuth {
  func isAuthenticated(_ method: RogoCore.RGBAuthMethod) -> Swift.Bool
  func getAccessToken(_ method: RogoCore.RGBAuthMethod, completion: @escaping RogoCore.RGBCompletionObject<Swift.String?>)
  func getUserInfo(_ method: RogoCore.RGBAuthMethod, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBUser?>)
  func signIn(_ method: RogoCore.RGBAuthMethod, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
  func signUp(_ method: RogoCore.RGBAuthMethod, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
  func signOut(_ method: RogoCore.RGBAuthMethod, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
  func resetPassword(_ email: Swift.String, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
}
@_hasMissingDesignatedInitializers public class RGBValueEventMotion : RogoCore.RGBCmdValue {
  public var motionEventValue: Swift.Int
  public init(valueBytes: [Swift.UInt8])
  @objc deinit
}
extension RogoCore.RGBDeviceServices {
  public func getZigbeeDongleStatus(at location: RogoCore.RGBLocation, observer: Swift.AnyObject?, timeout: Swift.Int = 5, completion: RogoCore.RGBCompletionObject<RogoCore.RGBUsbZigbeeStatus?>?)
  public func startScanZigbeeDevice(deviceType: RogoCore.RGBProductType, gateWay: RogoCore.RGBDevice, isTurnOnPairingMode: Swift.Bool, timeout: Swift.Int, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBMeshScannedDevice]?>?)
  public func stopScanZigbeeDevice(gateWay: RogoCore.RGBDevice)
  public func addZigbeeDevice(device: RogoCore.RGBMeshScannedDevice, toHub hub: RogoCore.RGBDevice, didUpdateProgessing: ((_ completedPercent: Swift.Int) -> ())?, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
}
@_hasMissingDesignatedInitializers public class RGBValueBrightnessKelvin : RogoCore.RGBCmdValue {
  public static let MAXB: Swift.Int
  public static let MINK: Swift.Float
  public static let MAXK: Swift.Float
  public var b: Swift.Int
  public var bSig: Swift.Int
  public var k: Swift.Int
  public init()
  public init(_ b: Swift.Int, _ k: Swift.Int)
  @objc deinit
}
public struct RGBLogPart {
  public var element: Swift.Int?
  public var eventSize: Swift.Int?
  public var currentPart: Swift.Int?
  public var previousPart: Swift.Int?
  public var cId: Swift.Int?
  public var iv: Swift.Int?
  public var logs: [RogoCore.RGBLog]
  public var startLogTimeSeconds: Swift.Int?
}
@_hasMissingDesignatedInitializers public class RGBNetworkStatusMessage : RogoCore.RGBMqttIotMessage {
  public var connected: Swift.Bool?
  public var mac: Swift.String?
  public var nextAddress: Swift.Int?
  public var rssi: Swift.Int?
  public var scanning: Swift.Bool?
  public var isAvailable: Swift.Bool
  public var uuid: Swift.String?
  public init(connected: Swift.Bool? = nil, mac: Swift.String? = nil, nextAddress: Swift.Int? = nil, rssi: Swift.Int? = nil, scanning: Swift.Bool? = nil, isAvailable: Swift.Bool = false, tId: [Swift.UInt8]? = nil, uuid: Swift.String? = nil, type: Swift.Int? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RGBValueTempHum : RogoCore.RGBCmdValue {
  public var temperatureValue: Swift.Double
  public var humidityValue: Swift.Double
  public init(tempAndHumValueBytes: [Swift.UInt8])
  public init(temperatureValueBytes: [Swift.UInt8])
  public init(humidityValueBytes: [Swift.UInt8])
  @objc deinit
}
public enum RGBAuthResponse {
  case success
  case failure
  public static func == (a: RogoCore.RGBAuthResponse, b: RogoCore.RGBAuthResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RGBiScenarioServices {
  func getListScenarioAt(location: RogoCore.RGBLocation, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBScenario]?>?)
  func addScenario(scenario: RogoCore.RGBScenario, completion: RogoCore.RGBCompletionObject<RogoCore.RGBScenario?>?)
  func updateScenario(scenario: RogoCore.RGBScenario, completion: RogoCore.RGBCompletionObject<RogoCore.RGBScenario?>?)
  func deleteScenarioWith(uuid: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  func runScenario(scenario: RogoCore.RGBScenario, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
}
public protocol RGBiScheduleServices {
  func getListSchedulesAt(location: RogoCore.RGBLocation, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBSchedule]?>?)
  func addSchedule(schedule: RogoCore.RGBSchedule, completion: RogoCore.RGBCompletionObject<RogoCore.RGBSchedule?>?)
  func updateSchedule(schedule: RogoCore.RGBSchedule, completion: RogoCore.RGBCompletionObject<RogoCore.RGBSchedule?>?)
  func deleteScheduleWith(uuid: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
}
public enum RGBOwnerType : Swift.Int {
  case device
  case group
  case location
  case scenario
  case schedule
  case automation
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RGBCmdValue {
  public var type: RogoCore.RGBCommandType
  public var blockData: [Swift.UInt8]
  @objc deinit
}
extension RogoCore.RGBDeviceServices {
  public func scanMeshDevices(deviceType: RogoCore.RGBProductType, timeout: Swift.Int = 10, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBMeshScannedDevice]?>? = nil)
  public func scanMeshDevices(timeout: Swift.Int = 3, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBMeshScannedDevice]?>?)
  public func scanMeshDevice(timeout: Swift.Int = 30, completion: RogoCore.RGBCompletionObject<RogoCore.RGBMeshScannedDevice?>?)
  public func stopScanMeshDevice()
  public func locateMeshDevice(device: RogoCore.RGBMeshScannedDevice, hub: RogoCore.RGBDevice, didStartLocating: (() -> ())?, didFinishLocating: (() -> ())?)
  public func stopLocateDevice()
  public func addMeshDevice(device: RogoCore.RGBMeshScannedDevice, toHub hub: RogoCore.RGBDevice, didUpdateProgessing: ((_ completedPercent: Swift.Int) -> ())? = nil, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  public func stopMeshAddProcess()
  public func resumeMeshAddProcess()
  public func cancelMeshAddProcess()
}
@_hasMissingDesignatedInitializers public class RGBAuthServices {
  public var authMethod: RogoCore.RGBAuthMethod
  public func isAuthenticated() -> Swift.Bool
  public func signIn(_ method: RogoCore.RGBAuthMethod, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
  public func signUp(_ method: RogoCore.RGBAuthMethod, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
  public func signOut(completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
  public func resetPassword(_ email: Swift.String, completion: @escaping RogoCore.RGBCompletionObject<RogoCore.RGBAuthResponse>)
  @objc deinit
}
public struct RGBSchedule : Swift.Codable {
  public var mode: Swift.Int?, time: Swift.Int?
  public var ownerID: Swift.String?
  public var sPartitions: [Swift.Int]?
  public var userID: Swift.String?
  public var extraInfo: RogoCore.RGBScheduleExtraInfo?
  public var cmd: RogoCore.RGBScenarioCmd?
  public var uuid: Swift.String?, owner: Swift.String?
  public var ownerType: Swift.Int?
  public var locationID: Swift.String?
  public var weekdays: [Swift.Int]?
  public var endpoint: Swift.String?
  public var timeInLocalTimeZone: Swift.Int? {
    get
  }
  public var weekdaysInLocalTimeZone: [Swift.Int]? {
    get
  }
  public init(mode: Swift.Int? = 0, time: Swift.Int? = nil, ownerID: Swift.String? = nil, sPartitions: [Swift.Int]? = nil, userID: Swift.String? = nil, extraInfo: RogoCore.RGBScheduleExtraInfo? = nil, cmd: RogoCore.RGBScenarioCmd? = nil, uuid: Swift.String? = nil, owner: Swift.String? = nil, ownerType: Swift.Int? = nil, locationID: Swift.String? = nil, weekdays: [Swift.Int]? = nil, endpoint: Swift.String? = nil)
  public static func convertTimeInCurrentTimeZoneToUTC(time: Swift.Int, dayWeeks: [Swift.Int]) -> (timeInUTC: Swift.Int, dayWeeksInUTC: [Swift.Int])
  public static func convertTimeInUTCToCurrentTimeZone(timeInUTC: Swift.Int, dayWeeksInUTC: [Swift.Int]) -> (timeInLocalTimeZone: Swift.Int, dayWeeksInLocalTimeZone: [Swift.Int])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RGBScheduleExtraInfo : Swift.Codable {
  public var label: Swift.String?
  public init(label: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RGBScenarioServices : RogoCore.RGBiScenarioServices {
  public func getListScenarioAt(location: RogoCore.RGBLocation, completion: RogoCore.RGBCompletionObject<[RogoCore.RGBScenario]?>?)
  public func addScenario(scenario: RogoCore.RGBScenario, completion: RogoCore.RGBCompletionObject<RogoCore.RGBScenario?>?)
  public func updateScenario(scenario: RogoCore.RGBScenario, completion: RogoCore.RGBCompletionObject<RogoCore.RGBScenario?>?)
  public func deleteScenarioWith(uuid: Swift.String, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  public func runScenario(scenario: RogoCore.RGBScenario, completion: RogoCore.RGBCompletionObject<Swift.Void?>?)
  @objc deinit
}
public typealias RGBEmptyBlockThrow = () throws -> Swift.Void
public typealias RGBEmptyCompletion = () -> Swift.Void
public typealias RGBCompletionObject<T> = (_ response: T, Swift.Error?) -> Swift.Void
public typealias RGBCompletionOptionalObject<T> = (_ response: T?) -> Swift.Void
public typealias RGBCompletionResponse = (_ response: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
public typealias RGBCompletionSubcribeTopic = (Swift.String, Swift.Error?) -> Swift.Void
public typealias RGBCompletionDeviceSetup = (Swift.Error?, Swift.String?) -> Swift.Void
@_hasMissingDesignatedInitializers public class RGBValueBattery : RogoCore.RGBCmdValue {
  public var batteryValue: Swift.Int
  public init(valueBytes: [Swift.UInt8])
  @objc deinit
}
public enum RGBNotificationEvent : Swift.String {
  case REFRESH_DEVICE_LIST
  case LOCATION_UPDATED
  case GROUP_UPDATED
  case HUB_STATUS_UPDATE
  case USB_DONGLE_STATUS_UPDATE
  case LIST_SCENARIO_UPDATED
  case LIST_SCHEDULES_UPDATED
  case LIST_AUTOMATION_UPDATED
  public static func addObserverNotification(event: RogoCore.RGBNotificationEvent, observer: Any, selector: ObjectiveC.Selector)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol RGBiProductServices {
  var allDevices: [RogoCore.RGBDevice] { get }
  func getProductsList(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBProduct]?>?)
  func getAllDevices(completion: RogoCore.RGBCompletionObject<[RogoCore.RGBDevice]?>?)
  func getDeviceWith(uuid: Swift.String, completion: RogoCore.RGBCompletionObject<RogoCore.RGBDevice?>?)
  func addDevices(devices: [RogoCore.RGBDevice], completion: RogoCore.RGBCompletionObject<[RogoCore.RGBDevice]?>?)
}
extension RogoCore.RGBRemoteCommand : Swift.Equatable {}
extension RogoCore.RGBRemoteCommand : Swift.Hashable {}
extension RogoCore.RGBRemoteCommand : Swift.RawRepresentable {}
extension RogoCore.RGBEventStateType : Swift.Equatable {}
extension RogoCore.RGBEventStateType : Swift.Hashable {}
extension RogoCore.RGBEventStateType : Swift.RawRepresentable {}
extension RogoCore.RGBPowerType : Swift.Equatable {}
extension RogoCore.RGBPowerType : Swift.Hashable {}
extension RogoCore.RGBProtocolType : Swift.Equatable {}
extension RogoCore.RGBProtocolType : Swift.Hashable {}
extension RogoCore.RGBNetworkEnvironment : Swift.Equatable {}
extension RogoCore.RGBNetworkEnvironment : Swift.Hashable {}
extension RogoCore.RGBOpenCloseValue : Swift.Equatable {}
extension RogoCore.RGBOpenCloseValue : Swift.Hashable {}
extension RogoCore.RGBOpenCloseValue : Swift.RawRepresentable {}
extension RogoCore.RGBCommandType : Swift.Equatable {}
extension RogoCore.RGBCommandType : Swift.Hashable {}
extension RogoCore.RGBCommandType : Swift.RawRepresentable {}
extension RogoCore.RGBProductCategoryType : Swift.Equatable {}
extension RogoCore.RGBProductCategoryType : Swift.Hashable {}
extension RogoCore.RGBProductCategoryType : Swift.RawRepresentable {}
extension RogoCore.RGBProductGroupType : Swift.Equatable {}
extension RogoCore.RGBProductGroupType : Swift.Hashable {}
extension RogoCore.RGBProductGroupType : Swift.RawRepresentable {}
extension RogoCore.RGBErrorCode : Swift.Equatable {}
extension RogoCore.RGBErrorCode : Swift.Hashable {}
extension RogoCore.RGBErrorCode : Swift.RawRepresentable {}
extension RogoCore.RGBAutomationType : Swift.Equatable {}
extension RogoCore.RGBAutomationType : Swift.Hashable {}
extension RogoCore.RGBAutomationType : Swift.RawRepresentable {}
extension RogoCore.RGBProductType : Swift.Equatable {}
extension RogoCore.RGBProductType : Swift.Hashable {}
extension RogoCore.RGBAuthResponse : Swift.Equatable {}
extension RogoCore.RGBAuthResponse : Swift.Hashable {}
extension RogoCore.RGBOwnerType : Swift.Equatable {}
extension RogoCore.RGBOwnerType : Swift.Hashable {}
extension RogoCore.RGBOwnerType : Swift.RawRepresentable {}
extension RogoCore.RGBNotificationEvent : Swift.Equatable {}
extension RogoCore.RGBNotificationEvent : Swift.Hashable {}
extension RogoCore.RGBNotificationEvent : Swift.RawRepresentable {}
